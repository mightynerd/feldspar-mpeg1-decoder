module Matrices.GenerateMatrices where

import           System.IO
import           Lib.Data
import           Feldspar                hiding ( not )
import           Language.Embedded.Expression

files  =
  [   "intra_quantizer_matrix"
    , "scan"
  ]

header =
  [   "-- Automatically generated by GenerateMatrices.hs"
    , "module Matrices.Matrices where"
    , "import Lib.Data"
    , "import Feldspar"
    , ""
  ]

main :: IO ()
main = do
  vlcs   <- mapM (parseFile . ("Matrices/" ++)) files
  handle <- openFile "Matrices/Matrices.hs" WriteMode
  sequence_ [ hPutStrLn handle h | h <- header ]
  sequence_
    [ hPutStrLn handle
      $  name
      ++ " :: [[Int32]]\n"
      ++ name
      ++ " = "
      ++ vlc
      ++ "\n"
    | (name, vlc) <- zip files vlcs
    ]

parseFile :: String -> IO String
parseFile f = do
  handle   <- openFile f ReadMode
  contents <- hGetContents handle
  let nodes :: [[Data Int32]]
      nodes = [ toList line | line <- filter (not . ignore) $ lines contents ]
  return $ show nodes

ignore :: String -> Bool
ignore ('#' : s) = True
ignore ""        = True
ignore s         = False

toList :: Read a => String -> [a]
toList s | w <- words s = map read w
         | otherwise    = error $ "Invalid input to twords: " ++ s
