-- Automatically generated by GenerateVLC.hs
module VLC.VLC where
import Lib.Data
import Feldspar

 -- Single tables
macroblock_address_increment :: VLC (Data Int32)
macroblock_address_increment = Node (Leaf (1)) (Node (Node (Leaf (2)) (Leaf (3))) (Node (Node (Leaf (4)) (Leaf (5))) (Node (Node (Leaf (6)) (Leaf (7))) (Node (Node (Node (Leaf (8)) (Leaf (9))) (Node (Node (Leaf (10)) (Leaf (11))) (Node (Leaf (12)) (Leaf (13))))) (Node (Node (Node (Leaf (14)) (Leaf (15))) (Node (Node (Node (Leaf (16)) (Leaf (17))) (Node (Leaf (18)) (Leaf (19)))) (Node (Node (Leaf (20)) (Leaf (21))) (Node (Node (Leaf (22)) (Leaf (23))) (Node (Leaf (24)) (Leaf (25))))))) (Node (Node (Node (Node (Node (Leaf (26)) (Leaf (27))) (Node (Leaf (28)) (Leaf (29)))) (Node (Node (Leaf (30)) (Leaf (31))) (Node (Leaf (32)) (Leaf (33))))) End) (Node (Node (Node (Node (Leaf (-1)) End) End) (Node End (Node End (Leaf (-2))))) End)))))))

dct_dc_size_luminance :: VLC (Data Int32)
dct_dc_size_luminance = Node (Node (Node (Node (Node (Node (Node End (Leaf (8))) (Leaf (7))) (Leaf (6))) (Leaf (5))) (Leaf (4))) (Node (Leaf (3)) (Leaf (0)))) (Node (Leaf (2)) (Leaf (1)))

dct_dc_size_chrominance :: VLC (Data Int32)
dct_dc_size_chrominance = Node (Node (Node (Node (Node (Node (Node (Node End (Leaf (8))) (Leaf (7))) (Leaf (6))) (Leaf (5))) (Leaf (4))) (Leaf (3))) (Leaf (2))) (Node (Leaf (1)) (Leaf (0)))

motion_vector_codes :: VLC (Data Int32)
motion_vector_codes = Node (Leaf (0)) (Node (Node (Leaf (-1)) (Leaf (1))) (Node (Node (Leaf (-2)) (Leaf (2))) (Node (Node (Leaf (-3)) (Leaf (3))) (Node (Node (Node (Leaf (-4)) (Leaf (4))) (Node (Node (Leaf (-5)) (Leaf (5))) (Node (Leaf (-6)) (Leaf (6))))) (Node (Node (Node (Leaf (-7)) (Leaf (7))) (Node (Node (Node (Leaf (-8)) (Leaf (8))) (Node (Leaf (-9)) (Leaf (9)))) (Node (Node (Leaf (-10)) (Leaf (10))) (Node (Node (Leaf (-11)) (Leaf (11))) (Node (Leaf (-12)) (Leaf (12))))))) (Node (Node (Node (Node (Node (Leaf (-13)) (Leaf (13))) (Node (Leaf (-14)) (Leaf (14)))) (Node (Node (Leaf (-15)) (Leaf (15))) (Node (Leaf (-16)) (Leaf (16))))) End) End))))))

coded_block_pattern :: VLC (Data Int32)
coded_block_pattern = Node (Node (Node (Leaf (60)) (Node (Leaf (4)) (Leaf (8)))) (Node (Node (Leaf (16)) (Leaf (32))) (Node (Node (Leaf (12)) (Leaf (48))) (Node (Leaf (20)) (Leaf (40)))))) (Node (Node (Node (Node (Leaf (28)) (Leaf (44))) (Node (Leaf (52)) (Leaf (56)))) (Node (Node (Leaf (1)) (Leaf (61))) (Node (Leaf (2)) (Leaf (62))))) (Node (Node (Node (Node (Leaf (24)) (Leaf (36))) (Node (Leaf (3)) (Leaf (63)))) (Node (Node (Node (Leaf (5)) (Leaf (9))) (Node (Leaf (17)) (Leaf (33)))) (Node (Node (Leaf (6)) (Leaf (10))) (Node (Leaf (18)) (Leaf (34)))))) (Node (Node (Node (Node (Node (Leaf (7)) (Leaf (11))) (Node (Leaf (19)) (Leaf (35)))) (Node (Node (Leaf (13)) (Leaf (49))) (Node (Leaf (21)) (Leaf (41))))) (Node (Node (Node (Leaf (14)) (Leaf (50))) (Node (Leaf (22)) (Leaf (42)))) (Node (Node (Leaf (15)) (Leaf (51))) (Node (Leaf (23)) (Leaf (43)))))) (Node (Node (Node (Node (Leaf (25)) (Leaf (37))) (Node (Leaf (26)) (Leaf (38)))) (Node (Node (Leaf (29)) (Leaf (45))) (Node (Leaf (53)) (Leaf (57))))) (Node (Node (Node (Leaf (30)) (Leaf (46))) (Node (Leaf (54)) (Leaf (58)))) (Node (Node (Node (Leaf (31)) (Leaf (47))) (Node (Leaf (55)) (Leaf (59)))) (Node (Node (Leaf (27)) (Leaf (39))) End)))))))


 -- Double tables
dct_coeff_first :: VLC (Data Int32, Data Int32)
dct_coeff_first = Node (Leaf ((0),(1))) (Node (Node (Leaf ((1),(1))) (Node (Leaf ((2),(1))) (Leaf ((0),(2))))) (Node (Node (Node (Leaf ((3),(1))) (Leaf ((4),(1)))) (Node (Leaf ((0),(3))) (Node (Node (Node (Leaf ((10),(1))) (Leaf ((0),(5)))) (Node (Leaf ((1),(3))) (Leaf ((3),(2))))) (Node (Node (Leaf ((11),(1))) (Leaf ((12),(1)))) (Node (Leaf ((0),(6))) (Leaf ((13),(1)))))))) (Node (Node (Node (Leaf ((5),(1))) (Leaf ((1),(2)))) (Node (Leaf ((6),(1))) (Leaf ((7),(1))))) (Node (Node (Node (Leaf ((8),(1))) (Leaf ((0),(4)))) (Node (Leaf ((9),(1))) (Leaf ((2),(2))))) (Node (Leaf ((-2),(-2))) (Node (Node (Node (Node (Leaf ((4),(2))) (Leaf ((14),(1)))) (Node (Leaf ((15),(1))) (Leaf ((1),(4))))) (Node (Node (Leaf ((2),(3))) (Leaf ((0),(7)))) (Node (Leaf ((5),(2))) (Leaf ((16),(1)))))) (Node (Node (Node (Node (Node (Leaf ((17),(1))) (Leaf ((6),(2)))) (Node (Leaf ((0),(8))) (Leaf ((3),(3))))) (Node (Node (Leaf ((1),(5))) (Leaf ((18),(1)))) (Node (Leaf ((19),(1))) (Leaf ((0),(9)))))) (Node (Node (Node (Leaf ((20),(1))) (Leaf ((21),(1)))) (Node (Leaf ((7),(2))) (Leaf ((2),(4))))) (Node (Node (Leaf ((0),(10))) (Leaf ((4),(3)))) (Node (Leaf ((8),(2))) (Leaf ((0),(11))))))) (Node (Node (Node (Node (Node (Leaf ((22),(1))) (Leaf ((23),(1)))) (Node (Leaf ((24),(1))) (Leaf ((25),(1))))) (Node (Node (Leaf ((26),(1))) (Leaf ((0),(12)))) (Node (Leaf ((0),(13))) (Leaf ((0),(14)))))) (Node (Node (Node (Leaf ((0),(15))) (Leaf ((1),(6)))) (Node (Leaf ((1),(7))) (Leaf ((2),(5))))) (Node (Node (Leaf ((3),(4))) (Leaf ((5),(3)))) (Node (Leaf ((9),(2))) (Leaf ((10),(2))))))) (Node (Node (Node (Node (Node (Leaf ((0),(16))) (Leaf ((0),(17)))) (Node (Leaf ((0),(18))) (Leaf ((0),(19))))) (Node (Node (Leaf ((0),(20))) (Leaf ((0),(21)))) (Node (Leaf ((0),(22))) (Leaf ((0),(23)))))) (Node (Node (Node (Leaf ((0),(24))) (Leaf ((0),(25)))) (Node (Leaf ((0),(26))) (Leaf ((0),(27))))) (Node (Node (Leaf ((0),(28))) (Leaf ((0),(29)))) (Node (Leaf ((0),(30))) (Leaf ((0),(31))))))) (Node (Node (Node (Node (Node (Leaf ((1),(8))) (Leaf ((1),(9)))) (Node (Leaf ((1),(10))) (Leaf ((1),(11))))) (Node (Node (Leaf ((1),(12))) (Leaf ((1),(13)))) (Node (Leaf ((1),(14))) (Leaf ((0),(32)))))) (Node (Node (Node (Leaf ((0),(33))) (Leaf ((0),(34)))) (Node (Leaf ((0),(35))) (Leaf ((0),(36))))) (Node (Node (Leaf ((0),(37))) (Leaf ((0),(38)))) (Node (Leaf ((0),(39))) (Leaf ((0),(40))))))) (Node (Node (Node (Node (Node (Leaf ((27),(1))) (Leaf ((28),(1)))) (Node (Leaf ((29),(1))) (Leaf ((30),(1))))) (Node (Node (Leaf ((31),(1))) (Leaf ((11),(2)))) (Node (Leaf ((12),(2))) (Leaf ((13),(2)))))) (Node (Node (Node (Leaf ((14),(2))) (Leaf ((15),(2)))) (Node (Leaf ((16),(2))) (Leaf ((6),(3))))) (Node (Node (Leaf ((1),(15))) (Leaf ((1),(16)))) (Node (Leaf ((1),(17))) (Leaf ((1),(18))))))) End)))))))))))

dct_coeff_next :: VLC (Data Int32, Data Int32)
dct_coeff_next = Node (Node (Leaf ((0),(1))) (Leaf ((-1),(-1)))) (Node (Node (Leaf ((1),(1))) (Node (Leaf ((2),(1))) (Leaf ((0),(2))))) (Node (Node (Node (Leaf ((3),(1))) (Leaf ((4),(1)))) (Node (Leaf ((0),(3))) (Node (Node (Node (Leaf ((10),(1))) (Leaf ((0),(5)))) (Node (Leaf ((1),(3))) (Leaf ((3),(2))))) (Node (Node (Leaf ((11),(1))) (Leaf ((12),(1)))) (Node (Leaf ((0),(6))) (Leaf ((13),(1)))))))) (Node (Node (Node (Leaf ((5),(1))) (Leaf ((1),(2)))) (Node (Leaf ((6),(1))) (Leaf ((7),(1))))) (Node (Node (Node (Leaf ((8),(1))) (Leaf ((0),(4)))) (Node (Leaf ((9),(1))) (Leaf ((2),(2))))) (Node (Leaf ((-2),(-2))) (Node (Node (Node (Node (Leaf ((4),(2))) (Leaf ((14),(1)))) (Node (Leaf ((15),(1))) (Leaf ((1),(4))))) (Node (Node (Leaf ((2),(3))) (Leaf ((0),(7)))) (Node (Leaf ((5),(2))) (Leaf ((16),(1)))))) (Node (Node (Node (Node (Node (Leaf ((17),(1))) (Leaf ((6),(2)))) (Node (Leaf ((0),(8))) (Leaf ((3),(3))))) (Node (Node (Leaf ((1),(5))) (Leaf ((18),(1)))) (Node (Leaf ((19),(1))) (Leaf ((0),(9)))))) (Node (Node (Node (Leaf ((20),(1))) (Leaf ((21),(1)))) (Node (Leaf ((7),(2))) (Leaf ((2),(4))))) (Node (Node (Leaf ((0),(10))) (Leaf ((4),(3)))) (Node (Leaf ((8),(2))) (Leaf ((0),(11))))))) (Node (Node (Node (Node (Node (Leaf ((22),(1))) (Leaf ((23),(1)))) (Node (Leaf ((24),(1))) (Leaf ((25),(1))))) (Node (Node (Leaf ((26),(1))) (Leaf ((0),(12)))) (Node (Leaf ((0),(13))) (Leaf ((0),(14)))))) (Node (Node (Node (Leaf ((0),(15))) (Leaf ((1),(6)))) (Node (Leaf ((1),(7))) (Leaf ((2),(5))))) (Node (Node (Leaf ((3),(4))) (Leaf ((5),(3)))) (Node (Leaf ((9),(2))) (Leaf ((10),(2))))))) (Node (Node (Node (Node (Node (Leaf ((0),(16))) (Leaf ((0),(17)))) (Node (Leaf ((0),(18))) (Leaf ((0),(19))))) (Node (Node (Leaf ((0),(20))) (Leaf ((0),(21)))) (Node (Leaf ((0),(22))) (Leaf ((0),(23)))))) (Node (Node (Node (Leaf ((0),(24))) (Leaf ((0),(25)))) (Node (Leaf ((0),(26))) (Leaf ((0),(27))))) (Node (Node (Leaf ((0),(28))) (Leaf ((0),(29)))) (Node (Leaf ((0),(30))) (Leaf ((0),(31))))))) (Node (Node (Node (Node (Node (Leaf ((1),(8))) (Leaf ((1),(9)))) (Node (Leaf ((1),(10))) (Leaf ((1),(11))))) (Node (Node (Leaf ((1),(12))) (Leaf ((1),(13)))) (Node (Leaf ((1),(14))) (Leaf ((0),(32)))))) (Node (Node (Node (Leaf ((0),(33))) (Leaf ((0),(34)))) (Node (Leaf ((0),(35))) (Leaf ((0),(36))))) (Node (Node (Leaf ((0),(37))) (Leaf ((0),(38)))) (Node (Leaf ((0),(39))) (Leaf ((0),(40))))))) (Node (Node (Node (Node (Node (Leaf ((27),(1))) (Leaf ((28),(1)))) (Node (Leaf ((29),(1))) (Leaf ((30),(1))))) (Node (Node (Leaf ((31),(1))) (Leaf ((11),(2)))) (Node (Leaf ((12),(2))) (Leaf ((13),(2)))))) (Node (Node (Node (Leaf ((14),(2))) (Leaf ((15),(2)))) (Node (Leaf ((16),(2))) (Leaf ((6),(3))))) (Node (Node (Leaf ((1),(15))) (Leaf ((1),(16)))) (Node (Leaf ((1),(17))) (Leaf ((1),(18))))))) End)))))))))))


 -- Tables with five values
macroblock_type_code_p :: VLC (Data Int32, Data Int32, Data Int32, Data Int32, Data Int32)
macroblock_type_code_p = Node (Leaf ((0),(1),(0),(1),(0))) (Node (Leaf ((0),(0),(0),(1),(0))) (Node (Leaf ((0),(1),(0),(0),(0))) (Node (Node (Leaf ((0),(0),(0),(0),(1))) (Leaf ((1),(1),(0),(1),(0)))) (Node (Leaf ((1),(0),(0),(1),(0))) (Node (Leaf ((1),(0),(0),(0),(1))) End)))))

macroblock_type_code_i :: VLC (Data Int32, Data Int32, Data Int32, Data Int32, Data Int32)
macroblock_type_code_i = Node (Leaf ((0),(0),(0),(0),(1))) (Node (Leaf ((1),(0),(0),(0),(1))) End)

